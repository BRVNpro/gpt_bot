from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from states.quiz_states import QuizStates
from utils.prompts import load_prompt
from utils.chatgpt_instance import gpt

router = Router()

# –¢–µ–º—ã –∏ –∏—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
TOPICS = {
    "quiz_prog": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "quiz_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "quiz_biology": "–ë–∏–æ–ª–æ–≥–∏—è"
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
BASE_PROMPT = load_prompt("quiz.txt")


@router.message(F.text == "/quiz")
async def quiz_start(message: Message, state: FSMContext):
    await state.set_state(QuizStates.selecting_topic)

    image = FSInputFile("images/quiz.jpg")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=code)] for code, name in TOPICS.items()
    ])
    await message.answer_photo(image, caption="üéì –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:", reply_markup=kb)


@router.callback_query(F.data == "quiz")
async def quiz_callback(callback: CallbackQuery, state: FSMContext):
    await quiz_start(callback.message, state)


@router.callback_query(F.data.in_(TOPICS.keys()))
async def select_topic(callback: CallbackQuery, state: FSMContext):
    topic_code = callback.data
    await state.update_data(topic=topic_code, last_topic=topic_code, score=0, total=0)
    await ask_question(callback.message, state, topic_code)


async def ask_question(message: Message, state: FSMContext, topic_code: str):
    await state.set_state(QuizStates.waiting_for_answer)

    # –¥–ª—è quiz_more –¥–æ—Å—Ç–∞—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É
    if topic_code == "quiz_more":
        data = await state.get_data()
        topic_code = data.get("last_topic", "quiz_prog")

    try:
        # GPT: —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî BASE_PROMPT, —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî "quiz_prog" –∏ —Ç.–ø.
        question = await gpt.send_question(BASE_PROMPT, topic_code)
        await state.update_data(current_question=question)
        await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")


@router.message(QuizStates.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    user_answer = message.text
    question = data["current_question"]
    topic = data.get("topic", "quiz_prog")

    try:
        # ‚úÖ GPT –ø–æ–ª—É—á–∞–µ—Ç system=BASE_PROMPT –∏ user=—Ç–≤–æ–π –æ—Ç–≤–µ—Ç + –≤–æ–ø—Ä–æ—Å
        result = await gpt.send_question(
            prompt_text=BASE_PROMPT,
            message_text=f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {user_answer}"
        )

        is_correct = result.strip().lower().startswith("–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        score = data.get("score", 0) + int(is_correct)
        total = data.get("total", 0) + 1

        await state.update_data(score=score, total=total)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="quiz_more")],
            [InlineKeyboardButton(text="üìö –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="quiz_change_topic")],
            [InlineKeyboardButton(text="üîô –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")]
        ])

        await message.answer(f"{result}\n\nüìä –°—á—ë—Ç: {score}/{total}", reply_markup=kb)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


@router.callback_query(F.data == "quiz_more")
async def quiz_more(callback: CallbackQuery, state: FSMContext):
    await ask_question(callback.message, state, "quiz_more")


@router.callback_query(F.data == "quiz_change_topic")
async def quiz_change_topic(callback: CallbackQuery, state: FSMContext):
    await quiz_start(callback.message, state)
