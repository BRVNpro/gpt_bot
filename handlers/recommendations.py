from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from utils.chatgpt_instance import gpt  # —ç—Ç–æ –Ω–∞—à GPT –∫–ª–∏–µ–Ω—Ç

router = Router()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
CATEGORIES = {
    "film": "–§–∏–ª—å–º—ã",
    "book": "–ö–Ω–∏–≥–∏",
    "music": "–ú—É–∑—ã–∫–∞"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RecStates(StatesGroup):
    choosing_category = State()
    entering_genre = State()
    showing_result = State()

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@router.callback_query(F.data == "recommend")
async def start_recommend(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(RecStates.choosing_category)

    # –ö–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"rec_cat:{code}")]
        for code, cat in CATEGORIES.items()
    ])
    await callback.message.answer("üé¨ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", reply_markup=kb)
    await callback.answer()

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@router.callback_query(F.data.startswith("rec_cat:"))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]
    await state.update_data(category=category, blacklist=[], last_result=None)
    await state.set_state(RecStates.entering_genre)

    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏ –∂–∞–Ω—Ä –¥–ª—è {CATEGORIES[category]}:")
    await callback.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∂–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞)
@router.message(RecStates.entering_genre)
async def input_genre(message: Message, state: FSMContext):
    genre = message.text
    data = await state.get_data()
    category = data["category"]

    await state.update_data(genre=genre)
    await send_recommendation(message, state, category, genre)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
@router.callback_query(F.data == "rec_dislike")
async def handle_dislike(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    blacklist = data.get("blacklist", [])
    last = data.get("last_result")

    if last:
        blacklist.append(last)

    await state.update_data(blacklist=blacklist)
    await send_recommendation(callback.message, state, data["category"], data["genre"])
    await callback.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä
@router.callback_query(F.data == "rec_restart")
async def restart(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RecStates.entering_genre)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∂–∞–Ω—Ä:")
    await callback.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@router.callback_query(F.data == "start")
async def end(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
async def send_recommendation(message: Message, state: FSMContext, category: str, genre: str):
    data = await state.get_data()
    blacklist = data.get("blacklist", [])

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 {CATEGORIES[category].lower()} –≤ –∂–∞–Ω—Ä–µ '{genre}'. –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è."
    if blacklist:
        prompt += "\n–ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —ç—Ç–∏: " + ", ".join(blacklist)

    try:
        result = await gpt.send_question(
            prompt_text="–¢—ã –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
            message_text=prompt
        )

        await state.set_state(RecStates.showing_result)
        await state.update_data(last_result=result.strip())

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üôÖ –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="rec_dislike")],
            [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä", callback_data="rec_restart")],
            [InlineKeyboardButton(text="üîô –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")]
        ])

        await message.answer(f"üéØ –í–æ—Ç –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n{result.strip()}", reply_markup=kb)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
