from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.chatgpt_instance import gpt  # ‚úÖ
from utils.prompts import load_prompt

router = Router()

# –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
LANGUAGES = {
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "de": "–ù–µ–º–µ—Ü–∫–∏–π",
    "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class TranslatorStates(StatesGroup):
    choosing_language = State()
    translating = State()


@router.message(F.text == "/translate")
async def translator_start(message: Message, state: FSMContext):
    await state.set_state(TranslatorStates.choosing_language)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"lang:{code}")]
        for code, name in LANGUAGES.items()
    ])
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=kb)


@router.callback_query(F.data == "translate")
async def translate_callback(callback: CallbackQuery, state: FSMContext):
    await translator_start(callback.message, state)


@router.callback_query(F.data.startswith("lang:"))
async def translator_choose_lang(callback: CallbackQuery, state: FSMContext):
    lang_code = callback.data.split(":")[1]
    lang_name = LANGUAGES.get(lang_code, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫")

    await state.update_data(lang_code=lang_code)
    await state.set_state(TranslatorStates.translating)

    await callback.message.answer(f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {lang_name}.")


@router.message(TranslatorStates.translating)
async def translator_process(message: Message, state: FSMContext):
    data = await state.get_data()
    lang_code = data["lang_code"]
    lang_name = LANGUAGES.get(lang_code, "—è–∑—ã–∫")

    user_text = message.text
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ {lang_name}:"

    try:
        result = await gpt.send_question(prompt, user_text)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="translate_restart")],
            [InlineKeyboardButton(text="üîô –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")]
        ])
        await message.answer(result, reply_markup=kb)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")


@router.callback_query(F.data == "translate_restart")
async def translator_restart(callback: CallbackQuery, state: FSMContext):
    await translator_start(callback.message, state)
